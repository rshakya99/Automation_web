{"name": "test_doSignUp[chrome-rohittest@yopmail.com-rohittest@yopmail.com-R-S-India-Pass@123-Pass@123]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x5645a27f11fa <unknown>\n#1 0x5645a230166d <unknown>\n#2 0x5645a234a90c <unknown>\n#3 0x5645a2348db7 <unknown>\n#4 0x5645a2374582 <unknown>\n#5 0x5645a2344b38 <unknown>\n#6 0x5645a237474e <unknown>\n#7 0x5645a2393007 <unknown>\n#8 0x5645a2374323 <unknown>\n#9 0x5645a2342de0 <unknown>\n#10 0x5645a2343dbe <unknown>\n#11 0x5645a27bd12b <unknown>\n#12 0x5645a27c10c7 <unknown>\n#13 0x5645a27aa6cc <unknown>\n#14 0x5645a27c1c47 <unknown>\n#15 0x5645a278f67f <unknown>\n#16 0x5645a27e0288 <unknown>\n#17 0x5645a27e0450 <unknown>\n#18 0x5645a27f0076 <unknown>\n#19 0x7ff57d94f609 start_thread", "trace": "self = <Testcases.test_signup.Test_SignUp object at 0x7f5483220730>, email = 'rohittest@yopmail.com', cemail = 'rohittest@yopmail.com', Fname = 'R'\nLname = 'S', country = 'India', password = 'Pass@123', cpassword = 'Pass@123'\n\n    @pytest.mark.parametrize(\"email,cemail,Fname,Lname, country, password,cpassword\",\n                             dataProvider.get_data(\"LoginTest\"))\n    def test_doSignUp(self, email,cemail,Fname,Lname, country, password,cpassword):\n        log_message = \"Test Do Sign up started\"\n        log.logger.info(log_message)\n        allure.attach(log_message, name=\"Sign up Test Start\", attachment_type=allure.attachment_type.TEXT)\n        regPage = RegistrationPage(self.driver)\n>       regPage.fillForm(email,cemail,Fname,Lname, country, password,cpassword)\n\ntest_signup.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../Pages/RegistrationPage.py:17: in fillForm\n    self.type_wait(\"cemail_XPATH\", cemail)\n../Pages/BasePage.py:28: in type_wait\n    element.send_keys(value)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:238: in send_keys\n    self._execute(\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f54835d83d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...wn>\\\\n#17 0x5645a27e0450 \\\\u003Cunknown>\\\\n#18 0x5645a27f0076 \\\\u003Cunknown>\\\\n#19 0x7ff57d94f609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.264)\nE       Stacktrace:\nE       #0 0x5645a27f11fa <unknown>\nE       #1 0x5645a230166d <unknown>\nE       #2 0x5645a234a90c <unknown>\nE       #3 0x5645a2348db7 <unknown>\nE       #4 0x5645a2374582 <unknown>\nE       #5 0x5645a2344b38 <unknown>\nE       #6 0x5645a237474e <unknown>\nE       #7 0x5645a2393007 <unknown>\nE       #8 0x5645a2374323 <unknown>\nE       #9 0x5645a2342de0 <unknown>\nE       #10 0x5645a2343dbe <unknown>\nE       #11 0x5645a27bd12b <unknown>\nE       #12 0x5645a27c10c7 <unknown>\nE       #13 0x5645a27aa6cc <unknown>\nE       #14 0x5645a27c1c47 <unknown>\nE       #15 0x5645a278f67f <unknown>\nE       #16 0x5645a27e0288 <unknown>\nE       #17 0x5645a27e0450 <unknown>\nE       #18 0x5645a27f0076 <unknown>\nE       #19 0x7ff57d94f609 start_thread\n\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "Sign up Test Start", "source": "4711c8e5-a002-48c9-9bcd-6ad6a1066351-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "53b0f898-b739-4984-babe-394c1f46fb3c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "email", "value": "'rohittest@yopmail.com'"}, {"name": "cemail", "value": "'rohittest@yopmail.com'"}, {"name": "Fname", "value": "'R'"}, {"name": "Lname", "value": "'S'"}, {"name": "country", "value": "'India'"}, {"name": "password", "value": "'Pass@123'"}, {"name": "cpassword", "value": "'Pass@123'"}], "start": 1739787015278, "stop": 1739787021816, "uuid": "285cc89d-4fd4-4c13-bb79-ff1983731e2a", "historyId": "e3f8690a42b9f7a12402e74bd607d9e3", "testCaseId": "0ef70b3892bb9e686b5fa6cb7f2c674e", "fullName": "test_signup.Test_SignUp#test_doSignUp", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_signup"}, {"name": "subSuite", "value": "Test_SignUp"}, {"name": "host", "value": "7047--CNM--GGN"}, {"name": "thread", "value": "8979-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_signup"}]}