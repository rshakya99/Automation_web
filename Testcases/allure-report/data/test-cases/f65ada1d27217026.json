{"uid":"f65ada1d27217026","name":"test_dologin[chrome-Nggdemopro_05@yopmail.com-Pass@123]","fullName":"test_login.Test_login#test_dologin","historyId":"fc090eac33fc58dc0325ad6c3214b1c8","time":{"start":1739786956995,"stop":1739786956995,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x55a23a4a91fa <unknown>\n#1 0x55a239fb9810 <unknown>\n#2 0x55a239f8f48f <unknown>\n#3 0x55a23a0349bd <unknown>\n#4 0x55a23a04a9bc <unknown>\n#5 0x55a23a02c323 <unknown>\n#6 0x55a239ffade0 <unknown>\n#7 0x55a239ffbdbe <unknown>\n#8 0x55a23a47512b <unknown>\n#9 0x55a23a4790c7 <unknown>\n#10 0x55a23a4626cc <unknown>\n#11 0x55a23a479c47 <unknown>\n#12 0x55a23a44767f <unknown>\n#13 0x55a23a498288 <unknown>\n#14 0x55a23a498450 <unknown>\n#15 0x55a23a4a8076 <unknown>\n#16 0x7f8e6004c609 start_thread","statusTrace":"request = <SubRequest 'get_browser' for <Function test_dologin[chrome-Nggdemopro_05@yopmail.com-Pass@123]>>\n\n    @pytest.fixture(params=[\"chrome\"], scope=\"function\")\n    def get_browser(request):\n        if request.param == \"chrome\":\n            driver = webdriver.Chrome()\n        elif request.param == \"firefox\":\n            driver = webdriver.Firefox()\n    \n        request.cls.driver = driver\n        driver.get(configReader.readConfig(\"basic info\", \"testsiteurl\"))\n>       driver.maximize_window()\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:536: in maximize_window\n    self.execute(command, None)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f34f3bcb8e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...wn>\\\\n#14 0x55a23a498450 \\\\u003Cunknown>\\\\n#15 0x55a23a4a8076 \\\\u003Cunknown>\\\\n#16 0x7f8e6004c609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.264)\nE       Stacktrace:\nE       #0 0x55a23a4a91fa <unknown>\nE       #1 0x55a239fb9810 <unknown>\nE       #2 0x55a239f8f48f <unknown>\nE       #3 0x55a23a0349bd <unknown>\nE       #4 0x55a23a04a9bc <unknown>\nE       #5 0x55a23a02c323 <unknown>\nE       #6 0x55a239ffade0 <unknown>\nE       #7 0x55a239ffbdbe <unknown>\nE       #8 0x55a23a47512b <unknown>\nE       #9 0x55a23a4790c7 <unknown>\nE       #10 0x55a23a4626cc <unknown>\nE       #11 0x55a23a479c47 <unknown>\nE       #12 0x55a23a44767f <unknown>\nE       #13 0x55a23a498288 <unknown>\nE       #14 0x55a23a498450 <unknown>\nE       #15 0x55a23a4a8076 <unknown>\nE       #16 0x7f8e6004c609 start_thread\n\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1739786956997,"stop":1739786959733,"duration":2736},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x55a23a4a91fa <unknown>\n#1 0x55a239fb9810 <unknown>\n#2 0x55a239f8f48f <unknown>\n#3 0x55a23a0349bd <unknown>\n#4 0x55a23a04a9bc <unknown>\n#5 0x55a23a02c323 <unknown>\n#6 0x55a239ffade0 <unknown>\n#7 0x55a239ffbdbe <unknown>\n#8 0x55a23a47512b <unknown>\n#9 0x55a23a4790c7 <unknown>\n#10 0x55a23a4626cc <unknown>\n#11 0x55a23a479c47 <unknown>\n#12 0x55a23a44767f <unknown>\n#13 0x55a23a498288 <unknown>\n#14 0x55a23a498450 <unknown>\n#15 0x55a23a4a8076 <unknown>\n#16 0x7f8e6004c609 start_thread\n\n","statusTrace":"  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1139, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/_pytest/fixtures.py\", line 890, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/vvdn/Downloads/Test_Automation/Testcases/conftest.py\", line 38, in get_browser\n    driver.maximize_window()\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 536, in maximize_window\n    self.execute(command, None)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/home/vvdn/Downloads/Test_Automation/.venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"Test_login"},{"name":"host","value":"7047--CNM--GGN"},{"name":"thread","value":"8635-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email","value":"'Nggdemopro_05@yopmail.com'"},{"name":"get_browser","value":"'chrome'"},{"name":"password","value":"'Pass@123'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"f65ada1d27217026.json","parameterValues":["'Nggdemopro_05@yopmail.com'","'chrome'","'Pass@123'"]}