{"uid":"2c1933a5c8f1a6e2","name":"test_doSignUp[chrome-rohittest@yopmail.com-rohittest@yopmail.com-R-S-India-Pass@123-Pass@123]","fullName":"test_signup.Test_SignUp#test_doSignUp","historyId":"e3f8690a42b9f7a12402e74bd607d9e3","time":{"start":1739806785121,"stop":1739806791473,"duration":6352},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x565484f4d1fa <unknown>\n#1 0x565484a5d66d <unknown>\n#2 0x565484aa690c <unknown>\n#3 0x565484aa4db7 <unknown>\n#4 0x565484ad0582 <unknown>\n#5 0x565484aa0b38 <unknown>\n#6 0x565484ad074e <unknown>\n#7 0x565484aef007 <unknown>\n#8 0x565484ad0323 <unknown>\n#9 0x565484a9ede0 <unknown>\n#10 0x565484a9fdbe <unknown>\n#11 0x565484f1912b <unknown>\n#12 0x565484f1d0c7 <unknown>\n#13 0x565484f066cc <unknown>\n#14 0x565484f1dc47 <unknown>\n#15 0x565484eeb67f <unknown>\n#16 0x565484f3c288 <unknown>\n#17 0x565484f3c450 <unknown>\n#18 0x565484f4c076 <unknown>\n#19 0x7f08ef133609 start_thread","statusTrace":"self = <Testcases.test_signup.Test_SignUp object at 0x7f2920bfc070>\nemail = 'rohittest@yopmail.com', cemail = 'rohittest@yopmail.com', Fname = 'R'\nLname = 'S', country = 'India', password = 'Pass@123', cpassword = 'Pass@123'\n\n    @pytest.mark.parametrize(\"email,cemail,Fname,Lname, country, password,cpassword\",\n                             dataProvider.get_data(\"LoginTest\"))\n    def test_doSignUp(self, email,cemail,Fname,Lname, country, password,cpassword):\n        log_message = \"Test Do Sign up started\"\n        log.logger.info(log_message)\n        allure.attach(log_message, name=\"Sign up Test Start\", attachment_type=allure.attachment_type.TEXT)\n        regPage = RegistrationPage(self.driver)\n>       regPage.fillForm(email,cemail,Fname,Lname, country, password,cpassword)\n\ntest_signup.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/RegistrationPage.py:17: in fillForm\n    self.type_wait(\"cemail_XPATH\", cemail)\n../Pages/BasePage.py:28: in type_wait\n    element.send_keys(value)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:238: in send_keys\n    self._execute(\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2920bdccd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...wn>\\\\n#17 0x565484f3c450 \\\\u003Cunknown>\\\\n#18 0x565484f4c076 \\\\u003Cunknown>\\\\n#19 0x7f08ef133609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.264)\nE       Stacktrace:\nE       #0 0x565484f4d1fa <unknown>\nE       #1 0x565484a5d66d <unknown>\nE       #2 0x565484aa690c <unknown>\nE       #3 0x565484aa4db7 <unknown>\nE       #4 0x565484ad0582 <unknown>\nE       #5 0x565484aa0b38 <unknown>\nE       #6 0x565484ad074e <unknown>\nE       #7 0x565484aef007 <unknown>\nE       #8 0x565484ad0323 <unknown>\nE       #9 0x565484a9ede0 <unknown>\nE       #10 0x565484a9fdbe <unknown>\nE       #11 0x565484f1912b <unknown>\nE       #12 0x565484f1d0c7 <unknown>\nE       #13 0x565484f066cc <unknown>\nE       #14 0x565484f1dc47 <unknown>\nE       #15 0x565484eeb67f <unknown>\nE       #16 0x565484f3c288 <unknown>\nE       #17 0x565484f3c450 <unknown>\nE       #18 0x565484f4c076 <unknown>\nE       #19 0x7f08ef133609 start_thread\n\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1739806778710,"stop":1739806785118,"duration":6408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"log_on_failure","time":{"start":1739806785118,"stop":1739806785119,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x565484f4d1fa <unknown>\n#1 0x565484a5d66d <unknown>\n#2 0x565484aa690c <unknown>\n#3 0x565484aa4db7 <unknown>\n#4 0x565484ad0582 <unknown>\n#5 0x565484aa0b38 <unknown>\n#6 0x565484ad074e <unknown>\n#7 0x565484aef007 <unknown>\n#8 0x565484ad0323 <unknown>\n#9 0x565484a9ede0 <unknown>\n#10 0x565484a9fdbe <unknown>\n#11 0x565484f1912b <unknown>\n#12 0x565484f1d0c7 <unknown>\n#13 0x565484f066cc <unknown>\n#14 0x565484f1dc47 <unknown>\n#15 0x565484eeb67f <unknown>\n#16 0x565484f3c288 <unknown>\n#17 0x565484f3c450 <unknown>\n#18 0x565484f4c076 <unknown>\n#19 0x7f08ef133609 start_thread","statusTrace":"self = <Testcases.test_signup.Test_SignUp object at 0x7f2920bfc070>\nemail = 'rohittest@yopmail.com', cemail = 'rohittest@yopmail.com', Fname = 'R'\nLname = 'S', country = 'India', password = 'Pass@123', cpassword = 'Pass@123'\n\n    @pytest.mark.parametrize(\"email,cemail,Fname,Lname, country, password,cpassword\",\n                             dataProvider.get_data(\"LoginTest\"))\n    def test_doSignUp(self, email,cemail,Fname,Lname, country, password,cpassword):\n        log_message = \"Test Do Sign up started\"\n        log.logger.info(log_message)\n        allure.attach(log_message, name=\"Sign up Test Start\", attachment_type=allure.attachment_type.TEXT)\n        regPage = RegistrationPage(self.driver)\n>       regPage.fillForm(email,cemail,Fname,Lname, country, password,cpassword)\n\ntest_signup.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Pages/RegistrationPage.py:17: in fillForm\n    self.type_wait(\"cemail_XPATH\", cemail)\n../Pages/BasePage.py:28: in type_wait\n    element.send_keys(value)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:238: in send_keys\n    self._execute(\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:402: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2920bdccd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...wn>\\\\n#17 0x565484f3c450 \\\\u003Cunknown>\\\\n#18 0x565484f4c076 \\\\u003Cunknown>\\\\n#19 0x7f08ef133609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.264)\nE       Stacktrace:\nE       #0 0x565484f4d1fa <unknown>\nE       #1 0x565484a5d66d <unknown>\nE       #2 0x565484aa690c <unknown>\nE       #3 0x565484aa4db7 <unknown>\nE       #4 0x565484ad0582 <unknown>\nE       #5 0x565484aa0b38 <unknown>\nE       #6 0x565484ad074e <unknown>\nE       #7 0x565484aef007 <unknown>\nE       #8 0x565484ad0323 <unknown>\nE       #9 0x565484a9ede0 <unknown>\nE       #10 0x565484a9fdbe <unknown>\nE       #11 0x565484f1912b <unknown>\nE       #12 0x565484f1d0c7 <unknown>\nE       #13 0x565484f066cc <unknown>\nE       #14 0x565484f1dc47 <unknown>\nE       #15 0x565484eeb67f <unknown>\nE       #16 0x565484f3c288 <unknown>\nE       #17 0x565484f3c450 <unknown>\nE       #18 0x565484f4c076 <unknown>\nE       #19 0x7f08ef133609 start_thread\n\n../.venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","steps":[],"attachments":[{"uid":"bfac5ce5f605ed0d","name":"Sign up Test Start","source":"bfac5ce5f605ed0d.txt","type":"text/plain","size":23},{"uid":"a7ca1ce9a135844a","name":"log","source":"a7ca1ce9a135844a.txt","type":"text/plain","size":493}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"log_on_failure::0","time":{"start":1739806791529,"stop":1739806791657,"duration":128},"status":"passed","steps":[],"attachments":[{"uid":"33d068028409b236","name":"dologin","source":"33d068028409b236.png","type":"image/png","size":38701}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"get_browser::0","time":{"start":1739806791658,"stop":1739806791729,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_signup"},{"name":"subSuite","value":"Test_SignUp"},{"name":"host","value":"7047--CNM--GGN"},{"name":"thread","value":"13737-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_signup"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Fname","value":"'R'"},{"name":"Lname","value":"'S'"},{"name":"cemail","value":"'rohittest@yopmail.com'"},{"name":"country","value":"'India'"},{"name":"cpassword","value":"'Pass@123'"},{"name":"email","value":"'rohittest@yopmail.com'"},{"name":"get_browser","value":"'chrome'"},{"name":"password","value":"'Pass@123'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"dcbe22bf3a5c5fff","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x55f2df1a31fa <unknown>\n#1 0x55f2decb366d <unknown>\n#2 0x55f2decfc90c <unknown>\n#3 0x55f2decfadb7 <unknown>\n#4 0x55f2ded26582 <unknown>\n#5 0x55f2decf6b38 <unknown>\n#6 0x55f2ded2674e <unknown>\n#7 0x55f2ded45007 <unknown>\n#8 0x55f2ded26323 <unknown>\n#9 0x55f2decf4de0 <unknown>\n#10 0x55f2decf5dbe <unknown>\n#11 0x55f2df16f12b <unknown>\n#12 0x55f2df1730c7 <unknown>\n#13 0x55f2df15c6cc <unknown>\n#14 0x55f2df173c47 <unknown>\n#15 0x55f2df14167f <unknown>\n#16 0x55f2df192288 <unknown>\n#17 0x55f2df192450 <unknown>\n#18 0x55f2df1a2076 <unknown>\n#19 0x7fedec62e609 start_thread","time":{"start":1739806686302,"stop":1739806690186,"duration":3884}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"12947ac709ed1dd9","reportUrl":"http://localhost:8080/job/Test_Automation/4/allure/#testresult/12947ac709ed1dd9","status":"broken","statusDetails":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.264)\nStacktrace:\n#0 0x55f2df1a31fa <unknown>\n#1 0x55f2decb366d <unknown>\n#2 0x55f2decfc90c <unknown>\n#3 0x55f2decfadb7 <unknown>\n#4 0x55f2ded26582 <unknown>\n#5 0x55f2decf6b38 <unknown>\n#6 0x55f2ded2674e <unknown>\n#7 0x55f2ded45007 <unknown>\n#8 0x55f2ded26323 <unknown>\n#9 0x55f2decf4de0 <unknown>\n#10 0x55f2decf5dbe <unknown>\n#11 0x55f2df16f12b <unknown>\n#12 0x55f2df1730c7 <unknown>\n#13 0x55f2df15c6cc <unknown>\n#14 0x55f2df173c47 <unknown>\n#15 0x55f2df14167f <unknown>\n#16 0x55f2df192288 <unknown>\n#17 0x55f2df192450 <unknown>\n#18 0x55f2df1a2076 <unknown>\n#19 0x7fedec62e609 start_thread","time":{"start":1739806686302,"stop":1739806690186,"duration":3884}}]},"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"2c1933a5c8f1a6e2.json","parameterValues":["'R'","'S'","'rohittest@yopmail.com'","'India'","'Pass@123'","'rohittest@yopmail.com'","'chrome'","'Pass@123'"]}